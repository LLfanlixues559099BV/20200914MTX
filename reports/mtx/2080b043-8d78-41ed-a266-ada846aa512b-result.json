{"name": "test_login_error[value0]", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <script.test_mtx_login.TestLogin object at 0x000001F4E5C1A470>, value = {'accounts': 'fanxuecheng', 'exp': '密码格式 6~18 个字符之间', 'pwd': ''}\n\n    @pytest.mark.parametrize('value', parse_data('mtx_Login', 'test_login'))\n    def test_login_error(self, value):\n        data = {'accounts': value['accounts'], 'pwd': value['pwd']}\n        resp_login = self.login_obj.login(self.session, data)\n>       assert resp_login.json().get('msg') == value['exp']\n\nscript\\test_mtx_login.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nc:\\python3.6\\lib\\site-packages\\requests\\models.py:898: in json\n    return complexjson.loads(self.text, **kwargs)\nc:\\python3.6\\lib\\json\\__init__.py:354: in loads\n    return _default_decoder.decode(s)\nc:\\python3.6\\lib\\json\\decoder.py:339: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000001F4E4501550>\ns = '<html>\\n<head>\\n    <title>Charles Error Report</title>\\n    <style type=\"text/css\">\\nbody {\\n    font-family: Arial,...n<i>Charles Proxy, <a href=\"http://www.charlesproxy.com/\">http://www.charlesproxy.com/</a></i>\\n</p>\\n</body>\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nc:\\python3.6\\lib\\json\\decoder.py:357: JSONDecodeError"}, "parameters": [{"name": "value", "value": "{'accounts': 'fanxuecheng', 'pwd': '', 'exp': '密码格式 6~18 个字符之间'}"}], "start": 1599153519932, "stop": 1599153519932, "uuid": "1da20849-0868-4290-9446-b0f9649c05d4", "historyId": "0e9a94c37025839fc3fc0f21920af56e", "testCaseId": "f7841b3627b4e154e9f8bf0321eac242", "fullName": "script.test_mtx_login.TestLogin#test_login_error", "labels": [{"name": "parentSuite", "value": "script"}, {"name": "suite", "value": "test_mtx_login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "LAPTOP-TJH92AQ2"}, {"name": "thread", "value": "83476-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "script.test_mtx_login"}]}